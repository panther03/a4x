//
// Contains code to load the bootstrap software.
//

#INCLUDE "<inc>/a4x.hjk"

EXTERN _text_size : UBYTE
EXTERN _data_size : UBYTE

#DEFINE FW_XLOFF_MAGIC 0x99584F46

STRUCT FwXloff
    Magic : ULONG,
    SymbolTableOffset : ULONG,
    SymbolCount : ULONG,
    StringTableOffset : ULONG,
    StringTableSize : ULONG,
    TargetArchitecture : ULONG,
    EntrySymbol : ULONG,
    Flags : ULONG,
    TimeStamp : ULONG,
    SectionTableOffset : ULONG,
    SectionCount : ULONG,
    ImportTableOffset : ULONG,
    ImportCount : ULONG,
    HeadLength : ULONG,
END

STRUCT FwXloffSymbol
    NameOffset : ULONG,
    Value : ULONG,
    SectionIndex : UINT,
    Type : UBYTE,
    Flags : UBYTE,
END

STRUCT FwXloffSectionHeader
    NameOffset : ULONG,
    DataOffset : ULONG,
    DataSize : ULONG,
    VirtualAddress : ULONG,
    RelocTableOffset : ULONG,
    RelocCount : ULONG,
    Flags : ULONG,
END

EXTERN FN FwxJumpToA3X (
    IN entrypoint : ULONG,
)

FN FwChainBoot (
    IN partition : ^FwDiskPartitionInfo,
)

    // Locate the a3x image.

    a3x := CAST XR_ROM_START + &_text_size + &_data_size TO ^FwXloff

    IF a3x^.Magic != FW_XLOFF_MAGIC THEN
        RtlPrint ( "Can't load this operating system, because it is a legacy
operating system and there is no a3x image.\n" )

        LEAVE
    END

    // Set the instant-boot NVRAM variable. This directs a3x to "instantly" boot
    // from the specified device once we jump to it.

    namebuf : UBYTE[16]

    RtlFormat (
        &namebuf[0], // dest
        16, // bufsize
        "/disks/%d/%c", // fmt
        partition^.Id,
        'a' + partition^.PartitionId,
    )

    FwSetNvramVariable (
        "instant-boot", // name
        &namebuf[0], // contents
    )

    // From now on we can't touch RAM because we're destroying it by loading a3x
    // over it.

    entrypoint := (CAST a3x +
        a3x^.SymbolTableOffset +
        a3x^.EntrySymbol * SIZEOF FwXloffSymbol TO ^FwXloffSymbol)^.Value

    // Load text.

    section := CAST a3x + a3x^.SectionTableOffset TO ^FwXloffSectionHeader

    entrypoint += section^.VirtualAddress

    RtlCopyBytes (
        CAST section^.VirtualAddress TO ^VOID, // dest
        a3x + section^.DataOffset, // src
        section^.DataSize, // size
    )

    // Load data.

    section += SIZEOF FwXloffSectionHeader

    RtlCopyBytes (
        CAST section^.VirtualAddress TO ^VOID, // dest
        a3x + section^.DataOffset, // src
        section^.DataSize, // size
    )

    // Zero bss.

    section += SIZEOF FwXloffSectionHeader

    RtlFillMemoryWithUlong (
        CAST section^.VirtualAddress TO ^VOID, // dest
        section^.DataSize, // size
        0, // ulong
    )

    // Jump to the a3x entrypoint to load the operating system.
    // This does not return.

    FwxJumpToA3X ( entrypoint )
END

FN FwBootPartition (
    IN partition : ^FwDiskPartitionInfo,
    IN args : ^UBYTE,
)

    // Load the bootstrap software from the provided partition, and jump to it.

    bootinfo := partition^.BootInfo

    IF bootinfo^.IsLegacy THEN
        // We have to chain load a3x to load this operating system.

        FwChainBoot ( partition )

        LEAVE
    END

    // This is a "new" operating system (disregard that word if you're reading
    // this in 20 years). Load the bootstrap sectors starting at 0x3000.

    buffer := CAST 0x3000 TO ^ULONG

    IF NOT FwReadDisk (
        partition, // partition
        buffer, // buffer
        bootinfo^.BootstrapSector, // sector
        bootinfo^.BootstrapCount, // count
    ) THEN
        RtlPrint ( "dks%ds%d: Failed to read bootstrap program\n",
            partition^.Id, partition^.PartitionId )

        LEAVE
    END

    IF buffer^ != A4X_BOOTSTRAP_MAGIC THEN
        RtlPrint ( "dks%ds%d: Bootstrap program is corrupted\n",
            partition^.Id, partition^.PartitionId )

        LEAVE
    END

    // We modified the instruction stream, so sweep the icache.

    FwxSweepIcache ()

    // Now jump to the boot program's entrypoint.

    entry := CAST 0x3004 TO FwBootstrapEntrypoint

    ret := entry (
        &FwDeviceDatabase, // devicedatabase
        &FwApiTable, // apitable
        partition, // bootpartition
        args, // args
    )

    RtlPrint ( "Boot program returned %d\n", ret )
END