//
// Implements interrupt management for the firmware.
//

#INCLUDE "<inc>/a4x.hjk"

EXTERN FN FwxEnableInterrupts ()

FN FwInitializeInterrupts (
    IN procid : UWORD,
)

    // Initialize the LSIC for the current processor.
    // Set the mask such that only the IPI interrupt (IRQ1) is enabled, and
    // disable all other interrupts.

    mylsic := &(CAST IO_LSIC_BASE TO ^IoLsicTable)^.Table[procid]

    mylsic^.Mask0 = 0xFFFFFFFD
    mylsic^.Mask1 = 0xFFFFFFFF
    mylsic^.Pending0 = 0
    mylsic^.Pending1 = 0
    mylsic^.Ipl = 63
    BARRIER

    // Now enable interrupts on the current processor.

    FwxEnableInterrupts ()
END

FwPendingPackets : ^FwIpiPacket[FW_PROCESSOR_MAX]

FN FwSendIpi (
    IN targetid : ULONG,
    IN function : FwKickProcessorCallbackF,
    IN context : ^VOID,
    IN wait : UWORD,
) : UBYTE

    // Send an IPI packet to the specified processor.
    // Returns TRUE if successful, FALSE if timeout.

    packet : FwIpiPacket

    packet.Acknowledged = FALSE
    packet.Function = function
    packet.Context = context

    FwPendingPackets[targetid] = &packet
    BARRIER

    // Write the IPI interrupt into the LSIC interrupt pending register for the
    // target processor.

    lsic := &(CAST IO_LSIC_BASE TO ^IoLsicTable)^.Table[targetid]

    lsic^.Pending0 = 0x00000002
    BARRIER

    IF wait THEN
        // Wait for packet.

        timeout := 50000000

        WHILE NOT packet.Acknowledged AND timeout DO
            BARRIER

            timeout -= 1
        END

        IF timeout == 0 THEN
            // Count ran down. Timeout.

            RtlPrint ( "Warning: IPI timeout on processor %d\n", targetid )

            RETURN FALSE
        END
    END

    RETURN TRUE
END

FN FwServiceIpi (
    IN procid : ULONG,
)

    // Called by the exception handler when an IPI is received.
    // Performs the function specified in the packet and signals it as
    // acknowledged.

    // Complete the interrupt BEFORE acknowledging the packet.

    lsic := &(CAST IO_LSIC_BASE TO ^IoLsicTable)^.Table[procid]

    lsic^.ClaimComplete = 1
    BARRIER

    packet := FwPendingPackets[procid]

    packet^.Function (
        procid, // number
        packet^.Context, // context
    )

    packet^.Acknowledged = TRUE
END

FN (FwApiKickProcessorF) FwKickProcessor (
    IN number : UWORD,
    IN context : ^VOID,
    IN callback : FwKickProcessorCallbackF,
)

    // Get the specified processor to execute the callback.

    FwSendIpi (
        number, // targetid
        callback, // function
        context, // context
        FALSE, // wait
    )
END