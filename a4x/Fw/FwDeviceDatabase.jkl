//
// Contains the firmware device database.
//

#INCLUDE "<inc>/a4x.hjk"

PUBLIC FwDeviceDatabase : FwDeviceDatabaseRecord

FwProbeCheck : ULONG

FN (FwBusErrorF) FwProbeBusError ()
    FwProbeCheck = 0
END

FN FwProbeProcessors ()

    // We probe processors by trying to read their LSIC IPL register. If there
    // is a bus error, there is no processor there.

    FwBusErrorCallback = &FwProbeBusError

    i := 0

    WHILE i < FW_PROCESSOR_MAX DO
        lsic := &(CAST IO_LSIC_BASE TO ^IoLsicTable)^.Table[i]

        FwProbeCheck = 1
        BARRIER

        FwxProbeUlong ( &lsic^.Ipl )

        FwxMemoryBarrier ()

        IF FwProbeCheck THEN
            // There is a processor here.

            FwDeviceDatabase.ProcessorCount += 1

            FwDeviceDatabase.Processors[i].Present = TRUE
        END

        i += 1
    END

    FwBusErrorCallback = NULLPTR

    RtlPrint ( "%d XR/17032 Processor", FwDeviceDatabase.ProcessorCount )

    IF FwDeviceDatabase.ProcessorCount > 1 THEN
        RtlPrint ( "s" )
    END

    RtlPrint ( "\n" )

    IF FwDeviceDatabase.ProcessorCount == 1 THEN
        // Must be an XR/station.

        FwDeviceDatabase.MachineType = XR_STATION

    ELSEIF FwDeviceDatabase.ProcessorCount <= 4 THEN
        // 2-4 processors is an XR/MP.

        FwDeviceDatabase.MachineType = XR_MP

    ELSE
        // >4 processors is an XR/frame.

        FwDeviceDatabase.MachineType = XR_FRAME
    END
END

FN FwProbeRamSlot (
    IN base : ^UBYTE,
    IN max : ^UBYTE,
) : UWORD

    // Size the RAM slot by writing junk one page frame at a time until there's
    // a bus error.

    size := 0

    // Set a bus error callback which will clear the FwProbeCheck flag.

    FwBusErrorCallback = &FwProbeBusError

    FwProbeCheck = 1
    BARRIER

    // We start probing at the end of the page frame so that we make sure we
    // only see complete page frames.

    base += 0xFFF

    WHILE base < max DO
        base^ = 0xA5
        BARRIER

        FwxMemoryBarrier ()

        IF NOT FwProbeCheck THEN
            BREAK
        END

        IF base^ != 0xA5 THEN
            // There was no bus error but that was erroneous.
            // Something weird is up! Don't include this page frame.

            BREAK
        END

        size += 4096
        base += 4096
    END

    FwBusErrorCallback = NULLPTR

    RETURN size
END

FN FwProbeRam ()

    // Size each RAM slot in sequence.

    RtlPrint ( "Sizing memory:\n" )

    RtlPrint ( "%8d %8d %8d %8d %8d %8d %8d %8d\n",
        0, 1, 2, 3, 4, 5, 6, 7 )

    i := 0
    base := NULLPTR
    max := base + 32 * 1024 * 1024

    WHILE i < 8 DO
        probebase := base

        IF i == 0 THEN
            // Skip the low 32KB, since that's where firmware lives and we will
            // corrupt ourselves if we write there.

            probebase += A4X_END
        END

        size := FwProbeRamSlot (
            probebase, // base
            max, // max
        )

        IF i == 0 THEN
            size += A4X_END
        END

        FwDeviceDatabase.Ram[i].PageFrameCount = size/4096
        FwDeviceDatabase.TotalRamBytes += size

        RtlPrint ( "%6dKB ", size/1024 )

        max += (32 * 1024 * 1024)
        base += (32 * 1024 * 1024)
        i += 1
    END

    RtlPrint ( "\n" )

    RtlPrint ( "Total memory: %dKB\n", FwDeviceDatabase.TotalRamBytes / 1024 )
END

FN FwProbeAmtsu ()

    // Probe the amtsu peripheral bus.
    // Nothing special, just select each device and record the MID.

    amtsu := CAST IO_AMTSU_BASE TO ^IoAmtsu

    i := 1

    WHILE i < 16 DO
        amtsu^.Select = i
        BARRIER

        FwDeviceDatabase.Amtsu[i].Mid = amtsu^.Mid
        BARRIER

        i += 1
    END
END

FN FwProbeEbus ()

    // Probe EBUS.
    // Nothing special, just select each device and record the MID.

    slotinfo := CAST IO_EBUS_BASE TO ^IoEbusSlotInfo

    i := 0

    WHILE i < 7 DO
        IF slotinfo^.Magic == IO_EBUS_MAGIC THEN
            FwDeviceDatabase.Boards[i].Address = slotinfo

            FwDeviceDatabase.Boards[i].BoardId = slotinfo^.BoardId

            RtlCopyString (
                &FwDeviceDatabase.Boards[i].Name[0], // dest
                &slotinfo^.Name[0], // src
                16, // bufsize
            )

            RtlPrint ( "Board '%s' @ Slot %d\n",
                &FwDeviceDatabase.Boards[i].Name[0], i )
        END

        i += 1
        slotinfo += IO_EBUS_SLOT_SPACE
    END
END

EXTERN FN FwProbeDks ()

FN FwProbeDevices ()

    // Fill in the device database by probing all of the devices.

    RtlPrint ( "Probing system devices...\n" )

    FwProbeProcessors ()

    FwProbeRam ()

    FwProbeDks ()

    FwProbeAmtsu ()

    FwProbeEbus ()
END