//
// Contains the main routines for the firmware.
//

#INCLUDE "<inc>/a4x.hjk"

EXTERN FN FwInitializeBump ()
EXTERN FN FwCioEarlyInitialize ()
EXTERN FN FwProbeDevices ()
EXTERN FN FwInitializeNvram ()
EXTERN FN FwInitializeFramebuffer ()
EXTERN FN FwUserInterface ()
EXTERN FN FwInitializeKeyboard ()
EXTERN FN FwInitializeGui ()

EXTERN FN FwInitializeInterrupts (
    IN procid : ULONG,
)

#IF CHK
PUBLIC FwInitializing : UBYTE
#END

FN FwMain ()
    
    // Main routine for the firmware.

#IF CHK
    FwInitializing = TRUE
#END

    // Initialize the bump allocator.

    FwInitializeBump ()

    // Initialize interrupts for processor 0 (us).

    FwInitializeInterrupts ( 0 )

    // Initialize the character I/O subsystem.

    FwCioEarlyInitialize ()

    // Now we can say hello.

    RtlPrint ( "\n    XR/computer Reset Asserted\n\n" )

    // Set up the NVRAM.

    FwInitializeNvram ()

    // Now probe the devices to fill in the device database.

    FwProbeDevices ()

#IF CHK
    // Set FwInitializing to false. Allocations are forbidden now.

    FwInitializing = FALSE
#END

    // Initialize the framebuffer.

    FwInitializeFramebuffer ()

    // Locate keyboard.

    FwInitializeKeyboard ()

    // If there's a framebuffer, initialize the UI facade now.

    FwInitializeGui ()

    // Decide whether to auto-boot or enter the command monitor.

    FwUserInterface ()

    WHILE TRUE DO
        FwxHalt ()
    END
END

FN FwProcessorStartup (
    IN procid : UWORD,
)
    
    // This is the startup routine for non-boot processors.

    // We have to initialize our interrupt controller to mask everything except
    // IPIs, and then enable interrupts. Note that before the first IPI, we have
    // zero clue what has been initialized or hasn't, so don't touch anything!

    FwInitializeInterrupts ( procid )

    // Here we will wait for IPIs forever.

    WHILE TRUE DO
        FwxHalt ()
    END
END

FN FwCrash (
    IN fmt : ^UBYTE,
    ... argv argc
)

    RtlPrint ( "\nFirmware Fatal Error: " )

    RtlPrintByVarTable (
        NULLPTR, // handle
        fmt, // fmt
        argv, // argv
        argc, // argc
    )

    RtlPrint ( "\n" )

    WHILE TRUE DO
        FwxHalt ()
    END
END